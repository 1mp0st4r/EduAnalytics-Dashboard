// API helper functions for database operations
import { dbService } from "./database"

export interface StudentFilters {
  riskLevel?: string
  classLevel?: string
  searchTerm?: string
}

export interface IssueFilters {
  status?: string
  severity?: string
}

// Student API helpers
export async function getStudentsWithFilters(filters: StudentFilters) {
  try {
    const students = await dbService.getStudents(filters)

    // Apply search term filter (done in memory for mock data)
    if (filters.searchTerm) {
      const searchLower = filters.searchTerm.toLowerCase()
      return students.filter(
        (student: any) =>
          student.full_name.toLowerCase().includes(searchLower) ||
          student.student_id.toLowerCase().includes(searchLower),
      )
    }

    return students
  } catch (error) {
    console.error("Error fetching students:", error)
    throw new Error("Failed to fetch students")
  }
}

export async function getStudentDetails(studentId: number) {
  try {
    const student = await dbService.getStudentById(studentId)
    if (!student) {
      throw new Error("Student not found")
    }
    return student
  } catch (error) {
    console.error("Error fetching student details:", error)
    throw error
  }
}

export async function updateStudentRiskAssessment(studentId: number, riskData: any) {
  try {
    await dbService.updateStudentRisk(studentId, riskData.riskLevel, riskData.dropoutProbability)

    // Also create AI prediction record
    const predictionData = {
      studentId,
      predictionType: "dropout_risk",
      predictionValue: riskData.dropoutProbability,
      confidenceScore: riskData.confidence || 85,
      modelVersion: "v1.2",
      predictionDate: new Date(),
    }

    // In real app, this would insert into ai_predictions table
    console.log("AI Prediction recorded:", predictionData)

    return { success: true }
  } catch (error) {
    console.error("Error updating student risk:", error)
    throw new Error("Failed to update student risk assessment")
  }
}

// Issue API helpers
export async function getIssuesWithFilters(filters: IssueFilters) {
  try {
    return await dbService.getStudentIssues(filters)
  } catch (error) {
    console.error("Error fetching issues:", error)
    throw new Error("Failed to fetch issues")
  }
}

export async function createNewIssue(issueData: any) {
  try {
    const result = await dbService.createStudentIssue(issueData)

    // Trigger email notification to mentor and parents
    await triggerIssueNotifications(issueData)

    return result[0]
  } catch (error) {
    console.error("Error creating issue:", error)
    throw new Error("Failed to create issue")
  }
}

export async function resolveIssue(issueId: number, resolutionNotes: string) {
  try {
    return await dbService.updateIssueStatus(issueId, "resolved", resolutionNotes)
  } catch (error) {
    console.error("Error resolving issue:", error)
    throw new Error("Failed to resolve issue")
  }
}

// Email notification helpers
export async function triggerIssueNotifications(issueData: any) {
  try {
    // Get student details for parent contact
    const student = await dbService.getStudentById(issueData.studentId)

    if (student && student.parent_email) {
      // Create parent notification
      await dbService.createEmailNotification({
        recipientEmail: student.parent_email,
        recipientType: "parent",
        subject: `рдЖрдкрдХреЗ рдмрдЪреНрдЪреЗ ${student.full_name} рдХреА рд╕рдорд╕реНрдпрд╛ рд░рд┐рдкреЛрд░реНрдЯ / Issue Report for ${student.full_name}`,
        message: `рдкреНрд░рд┐рдп рдЕрднрд┐рднрд╛рд╡рдХ,\n\nрдЖрдкрдХреЗ рдмрдЪреНрдЪреЗ рдиреЗ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╕рдорд╕реНрдпрд╛ рдХреА рд░рд┐рдкреЛрд░реНрдЯ рдХреА рд╣реИ:\n\nрд╕рдорд╕реНрдпрд╛ рдХрд╛ рдкреНрд░рдХрд╛рд░: ${issueData.issueType}\nрд╡рд┐рд╡рд░рдг: ${issueData.description}\n\nрд╣рдорд╛рд░реЗ рдореЗрдВрдЯрд░ рдЬрд▓реНрдж рд╣реА рдЗрд╕ рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рдорд╛рдзрд╛рди рдХрд░реЗрдВрдЧреЗред\n\nрдзрдиреНрдпрд╡рд╛рдж,\nрд╢рд┐рдХреНрд╖рд╛ рд╕рд╣рд╛рдпрдХ рдЯреАрдо`,
        notificationType: "issue_report",
        studentId: issueData.studentId,
      })
    }

    if (student && student.mentor_email) {
      // Create mentor notification
      await dbService.createEmailNotification({
        recipientEmail: student.mentor_email,
        recipientType: "mentor",
        subject: `рдирдИ рд╕рдорд╕реНрдпрд╛ рд░рд┐рдкреЛрд░реНрдЯ - ${student.full_name} / New Issue Report - ${student.full_name}`,
        message: `рдЫрд╛рддреНрд░ ${student.full_name} (${student.student_id}) рдиреЗ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╕рдорд╕реНрдпрд╛ рд░рд┐рдкреЛрд░реНрдЯ рдХреА рд╣реИ:\n\nрд╕рдорд╕реНрдпрд╛: ${issueData.issueType}\nрд╡рд┐рд╡рд░рдг: ${issueData.description}\nрдЧрдВрднреАрд░рддрд╛: ${issueData.severity}\n\nрдХреГрдкрдпрд╛ рдЬрд▓реНрдж рд╕реЗ рдЬрд▓реНрдж рдЗрд╕ рд╕рдорд╕реНрдпрд╛ рдХрд╛ рд╕рдорд╛рдзрд╛рди рдХрд░реЗрдВред`,
        notificationType: "issue_report",
        studentId: issueData.studentId,
      })
    }
  } catch (error) {
    console.error("Error triggering issue notifications:", error)
  }
}

export async function sendMonthlyReports() {
  try {
    const students = await dbService.getStudents()

    for (const student of students) {
      if (student.parent_email) {
        const reportContent = generateMonthlyReport(student)

        await dbService.createEmailNotification({
          recipientEmail: student.parent_email,
          recipientType: "parent",
          subject: `${student.full_name} рдХреА рдорд╛рд╕рд┐рдХ рд░рд┐рдкреЛрд░реНрдЯ / Monthly Report for ${student.full_name}`,
          message: reportContent,
          notificationType: "monthly_report",
          studentId: student.id,
        })
      }
    }

    return { success: true, message: "Monthly reports queued for sending" }
  } catch (error) {
    console.error("Error sending monthly reports:", error)
    throw new Error("Failed to send monthly reports")
  }
}

export async function sendHighRiskAlerts() {
  try {
    const highRiskStudents = await dbService.getStudents({ riskLevel: "high" })

    for (const student of highRiskStudents) {
      if (student.parent_email) {
        const alertContent = generateRiskAlert(student)

        await dbService.createEmailNotification({
          recipientEmail: student.parent_email,
          recipientType: "parent",
          subject: `рдорд╣рддреНрд╡рдкреВрд░реНрдг: ${student.full_name} рдХреЗ рд▓рд┐рдП рддрддреНрдХрд╛рд▓ рдзреНрдпрд╛рди рдЪрд╛рд╣рд┐рдП / URGENT: Immediate Attention Required for ${student.full_name}`,
          message: alertContent,
          notificationType: "risk_alert",
          studentId: student.id,
        })
      }
    }

    return { success: true, message: "High risk alerts queued for sending" }
  } catch (error) {
    console.error("Error sending high risk alerts:", error)
    throw new Error("Failed to send high risk alerts")
  }
}

// Report generation helpers
function generateMonthlyReport(student: any): string {
  return `рдкреНрд░рд┐рдп ${student.parent_name || "рдЕрднрд┐рднрд╛рд╡рдХ"},

рдЖрдкрдХреЗ рдмрдЪреНрдЪреЗ ${student.full_name} рдХреА рдорд╛рд╕рд┐рдХ рдкреНрд░рдЧрддрд┐ рд░рд┐рдкреЛрд░реНрдЯ:

ЁЯУК рд╢реИрдХреНрд╖рдгрд┐рдХ рдкреНрд░рджрд░реНрд╢рди: ${student.current_performance}%
ЁЯУЕ рдЙрдкрд╕реНрдерд┐рддрд┐: ${student.current_attendance}%
тЪая╕П рдЬреЛрдЦрд┐рдо рд╕реНрддрд░: ${student.risk_level === "high" ? "рдЙрдЪреНрдЪ" : student.risk_level === "medium" ? "рдордзреНрдпрдо" : "рдХрдо"}

${
  student.risk_level === "high"
    ? "тЪая╕П рдЪреЗрддрд╛рд╡рдиреА: рдЖрдкрдХреЗ рдмрдЪреНрдЪреЗ рдХреЛ рдЕрддрд┐рд░рд┐рдХреНрдд рд╕рд╣рд╛рдпрддрд╛ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред рдХреГрдкрдпрд╛ рд╕реНрдХреВрд▓ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред"
    : student.risk_level === "medium"
      ? "ЁЯУИ рд╕реБрдзрд╛рд░ рдХреА рдЧреБрдВрдЬрд╛рдЗрд╢: рдирд┐рдпрдорд┐рдд рдЕрднреНрдпрд╛рд╕ рд╕реЗ рдмреЗрд╣рддрд░ рдкрд░рд┐рдгрд╛рдо рдорд┐рд▓ рд╕рдХрддреЗ рд╣реИрдВред"
      : "тЬЕ рдмрдзрд╛рдИ! рдЖрдкрдХрд╛ рдмрдЪреНрдЪрд╛ рдЕрдЪреНрдЫрд╛ рдкреНрд░рджрд░реНрд╢рди рдХрд░ рд░рд╣рд╛ рд╣реИред"
}

рдореЗрдВрдЯрд░ рд╕рдВрдкрд░реНрдХ: ${student.mentor_name}
рдлреЛрди: ${student.mentor_phone}

рдзрдиреНрдпрд╡рд╛рдж,
рд╢рд┐рдХреНрд╖рд╛ рд╕рд╣рд╛рдпрдХ рдЯреАрдо`
}

function generateRiskAlert(student: any): string {
  return `рдкреНрд░рд┐рдп ${student.parent_name || "рдЕрднрд┐рднрд╛рд╡рдХ"},

рдпрд╣ рдПрдХ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╕реВрдЪрдирд╛ рд╣реИред рдЖрдкрдХреЗ рдмрдЪреНрдЪреЗ ${student.full_name} рдХреЛ рддрддреНрдХрд╛рд▓ рд╕рд╣рд╛рдпрддрд╛ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИред

ЁЯЪи рдЪрд┐рдВрддрд╛ рдХреЗ рдХрд╛рд░рдг:
тАв рдЙрдкрд╕реНрдерд┐рддрд┐: ${student.current_attendance}% (рдмрд╣реБрдд рдХрдо)
тАв рдкреНрд░рджрд░реНрд╢рди: ${student.current_performance}% (рд╕реБрдзрд╛рд░ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛)
тАв рдбреНрд░реЙрдкрдЖрдЙрдЯ рдЬреЛрдЦрд┐рдо: ${student.dropout_probability}%

ЁЯдЭ рд╣рдорд╛рд░реА рд╕рд╣рд╛рдпрддрд╛:
рд╣рдорд╛рд░реЗ рдореЗрдВрдЯрд░ ${student.mentor_name} рдЖрдкрдХреЗ рдмрдЪреНрдЪреЗ рдХреА рдорджрдж рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИрдВред

ЁЯУЮ рддрддреНрдХрд╛рд▓ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ:
рдореЗрдВрдЯрд░: ${student.mentor_phone}
рдИрдореЗрд▓: ${student.mentor_email}

рдХреГрдкрдпрд╛ рдЬрд▓реНрдж рд╕реЗ рдЬрд▓реНрдж рд╕реНрдХреВрд▓ рдЖрдПрдВ рдпрд╛ рдлреЛрди рдХрд░реЗрдВред рдЖрдкрдХреЗ рдмрдЪреНрдЪреЗ рдХрд╛ рднрд╡рд┐рд╖реНрдп рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИред

рдзрдиреНрдпрд╡рд╛рдж,
рд╢рд┐рдХреНрд╖рд╛ рд╕рд╣рд╛рдпрдХ рдЯреАрдо`
}

// Statistics and analytics helpers
export async function getDashboardStatistics() {
  try {
    return await dbService.getStudentStatistics()
  } catch (error) {
    console.error("Error fetching dashboard statistics:", error)
    throw new Error("Failed to fetch dashboard statistics")
  }
}
