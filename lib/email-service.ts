// Email notification service for student dropout prevention system
// Handles automated emails to parents, mentors, and administrators

import nodemailer from "nodemailer"

interface EmailTemplate {
  subject: string
  htmlContent: string
  textContent: string
}

interface EmailRecipient {
  email: string
  name: string
  type: "parent" | "mentor" | "admin"
}

interface EmailNotification {
  to: EmailRecipient[]
  template: EmailTemplate
  studentData?: any
  priority: "low" | "medium" | "high" | "urgent"
}

export class EmailService {
  private transporter: nodemailer.Transporter
  private fromEmail: string
  private fromName: string

  constructor() {
    this.fromEmail = process.env.FROM_EMAIL || "noreply@edusupport.gov.in"
    this.fromName = process.env.FROM_NAME || "‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï / EduSupport"

    this.transporter = nodemailer.createTransport({
      host: "smtp.gmail.com",
      port: 587,
      secure: false, // Use TLS
      auth: {
        user: this.fromEmail,
        pass: process.env.EMAIL_API_KEY, // Gmail App Password
      },
      tls: {
        rejectUnauthorized: false,
      },
    })
  }

  async sendEmail(notification: EmailNotification): Promise<boolean> {
    try {
      console.log(
        `[Email Service] Sending ${notification.priority} priority email to ${notification.to.length} recipients`,
      )

      // Send email to each recipient
      for (const recipient of notification.to) {
        const mailOptions = {
          from: `${this.fromName} <${this.fromEmail}>`,
          to: `${recipient.name} <${recipient.email}>`,
          subject: notification.template.subject,
          text: notification.template.textContent,
          html: notification.template.htmlContent,
        }

        console.log(`[Email] Sending to: ${recipient.email} (${recipient.name})`)

        const result = await this.transporter.sendMail(mailOptions)
        console.log(`[Email] Sent successfully: ${result.messageId}`)

        // Add delay to avoid rate limiting (Gmail has sending limits)
        await new Promise((resolve) => setTimeout(resolve, 1000))
      }

      return true
    } catch (error) {
      console.error("[Email Service] Error sending email:", error)
      return false
    }
  }

  async verifyConnection(): Promise<boolean> {
    try {
      await this.transporter.verify()
      console.log("[Email Service] SMTP connection verified successfully")
      return true
    } catch (error) {
      console.error("[Email Service] SMTP connection failed:", error)
      return false
    }
  }

  // Monthly progress report to parents
  async sendMonthlyReport(studentData: any): Promise<boolean> {
    const template = this.generateMonthlyReportTemplate(studentData)
    const recipients: EmailRecipient[] = []

    if (studentData.parent_email) {
      recipients.push({
        email: studentData.parent_email,
        name: studentData.parent_name || "‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï / Parent",
        type: "parent",
      })
    }

    if (studentData.mentor_email) {
      recipients.push({
        email: studentData.mentor_email,
        name: studentData.mentor_name || "‡§Æ‡•á‡§Ç‡§ü‡§∞ / Mentor",
        type: "mentor",
      })
    }

    const notification: EmailNotification = {
      to: recipients,
      template,
      studentData,
      priority: "medium",
    }

    return await this.sendEmail(notification)
  }

  // High-risk student alert to parents and mentors
  async sendHighRiskAlert(studentData: any): Promise<boolean> {
    const template = this.generateHighRiskAlertTemplate(studentData)
    const recipients: EmailRecipient[] = []

    if (studentData.parent_email) {
      recipients.push({
        email: studentData.parent_email,
        name: studentData.parent_name || "‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï / Parent",
        type: "parent",
      })
    }

    if (studentData.mentor_email) {
      recipients.push({
        email: studentData.mentor_email,
        name: studentData.mentor_name || "‡§Æ‡•á‡§Ç‡§ü‡§∞ / Mentor",
        type: "mentor",
      })
    }

    const notification: EmailNotification = {
      to: recipients,
      template,
      studentData,
      priority: "urgent",
    }

    return await this.sendEmail(notification)
  }

  // Issue report notification
  async sendIssueReport(studentData: any, issueData: any): Promise<boolean> {
    const template = this.generateIssueReportTemplate(studentData, issueData)
    const recipients: EmailRecipient[] = []

    if (studentData.parent_email) {
      recipients.push({
        email: studentData.parent_email,
        name: studentData.parent_name || "‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï / Parent",
        type: "parent",
      })
    }

    if (studentData.mentor_email) {
      recipients.push({
        email: studentData.mentor_email,
        name: studentData.mentor_name || "‡§Æ‡•á‡§Ç‡§ü‡§∞ / Mentor",
        type: "mentor",
      })
    }

    const notification: EmailNotification = {
      to: recipients,
      template,
      studentData,
      priority: issueData.severity === "critical" ? "urgent" : "high",
    }

    return await this.sendEmail(notification)
  }

  // Attendance warning
  async sendAttendanceWarning(studentData: any): Promise<boolean> {
    const template = this.generateAttendanceWarningTemplate(studentData)
    const recipients: EmailRecipient[] = []

    if (studentData.parent_email) {
      recipients.push({
        email: studentData.parent_email,
        name: studentData.parent_name || "‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï / Parent",
        type: "parent",
      })
    }

    const notification: EmailNotification = {
      to: recipients,
      template,
      studentData,
      priority: "high",
    }

    return await this.sendEmail(notification)
  }

  // Performance warning
  async sendPerformanceWarning(studentData: any): Promise<boolean> {
    const template = this.generatePerformanceWarningTemplate(studentData)
    const recipients: EmailRecipient[] = []

    if (studentData.parent_email) {
      recipients.push({
        email: studentData.parent_email,
        name: studentData.parent_name || "‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï / Parent",
        type: "parent",
      })
    }

    const notification: EmailNotification = {
      to: recipients,
      template,
      studentData,
      priority: "high",
    }

    return await this.sendEmail(notification)
  }

  // Password reset email
  async sendPasswordResetEmail(userEmail: string, resetLink: string, userName: string): Promise<boolean> {
    const template = this.generatePasswordResetTemplate(userName, resetLink)
    const recipients: EmailRecipient[] = [
      {
        email: userEmail,
        name: userName,
        type: "admin", // This will be used for styling
      }
    ]

    const notification: EmailNotification = {
      to: recipients,
      template,
      priority: "high",
    }

    return await this.sendEmail(notification)
  }

  // Email verification email
  async sendEmailVerificationEmail(userEmail: string, verificationLink: string, userName: string): Promise<boolean> {
    const template = this.generateEmailVerificationTemplate(userName, verificationLink)
    const recipients: EmailRecipient[] = [
      {
        email: userEmail,
        name: userName,
        type: "admin", // This will be used for styling
      }
    ]

    const notification: EmailNotification = {
      to: recipients,
      template,
      priority: "medium",
    }

    return await this.sendEmail(notification)
  }

  async sendBulkMonthlyReports(studentsData: any[]): Promise<{ sent: number; failed: number }> {
    let sent = 0
    let failed = 0

    console.log(`[Email Service] Sending monthly reports to ${studentsData.length} students`)

    for (const student of studentsData) {
      try {
        const success = await this.sendMonthlyReport(student)
        if (success) {
          sent++
        } else {
          failed++
        }
        // Increased delay for Gmail rate limiting (500 emails/day limit)
        await new Promise((resolve) => setTimeout(resolve, 2000))
      } catch (error) {
        console.error(`[Email Service] Failed to send monthly report for student ${student.student_id}:`, error)
        failed++
      }
    }

    console.log(`[Email Service] Monthly reports completed: ${sent} sent, ${failed} failed`)
    return { sent, failed }
  }

  // Bulk high-risk alerts
  async sendBulkHighRiskAlerts(highRiskStudents: any[]): Promise<{ sent: number; failed: number }> {
    let sent = 0
    let failed = 0

    console.log(`[Email Service] Sending high-risk alerts to ${highRiskStudents.length} students`)

    for (const student of highRiskStudents) {
      try {
        const success = await this.sendHighRiskAlert(student)
        if (success) {
          sent++
        } else {
          failed++
        }
        // Increased delay for Gmail rate limiting
        await new Promise((resolve) => setTimeout(resolve, 3000))
      } catch (error) {
        console.error(`[Email Service] Failed to send high-risk alert for student ${student.student_id}:`, error)
        failed++
      }
    }

    console.log(`[Email Service] High-risk alerts completed: ${sent} sent, ${failed} failed`)
    return { sent, failed }
  }

  // Template generators
  private generateMonthlyReportTemplate(studentData: any): EmailTemplate {
    const subject = `${studentData.full_name} ‡§ï‡•Ä ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü / Monthly Progress Report for ${studentData.full_name}`

    const textContent = `‡§™‡•ç‡§∞‡§ø‡§Ø ${studentData.parent_name || "‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï"} / Dear ${studentData.parent_name || "Parent"},

‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ${studentData.full_name} ‡§ï‡•Ä ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü:
Monthly progress report for your child ${studentData.full_name}:

üìä ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® / Academic Performance: ${studentData.current_performance}%
üìÖ ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§‡§ø / Attendance: ${studentData.current_attendance}%
‚ö†Ô∏è ‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§∏‡•ç‡§§‡§∞ / Risk Level: ${this.getRiskLevelText(studentData.risk_level)}
üéØ ‡§ï‡§ï‡•ç‡§∑‡§æ / Class: ${studentData.class_level}
üè´ ‡§∏‡•ç‡§ï‡•Ç‡§≤ / School: ${studentData.school_name}

${this.getPerformanceMessage(studentData)}

‡§Æ‡•á‡§Ç‡§ü‡§∞ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï / Mentor Contact:
üë§ ‡§®‡§æ‡§Æ / Name: ${studentData.mentor_name}
üìû ‡§´‡•ã‡§® / Phone: ${studentData.mentor_phone}
üìß ‡§à‡§Æ‡•á‡§≤ / Email: ${studentData.mentor_email}

‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§ï‡•á ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§π‡•à‡§Ç ‡§§‡•ã ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§
If you have any questions, please feel free to contact us.

‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ / Thank you,
‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§ü‡•Ä‡§Æ / EduSupport Team`

    const htmlContent = this.generateHTMLTemplate(subject, textContent, studentData, "monthly")

    return { subject, textContent, htmlContent }
  }

  private generateHighRiskAlertTemplate(studentData: any): EmailTemplate {
    const subject = `üö® ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£: ${studentData.full_name} ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§ß‡•ç‡§Ø‡§æ‡§® ‡§ö‡§æ‡§π‡§ø‡§è / URGENT: Immediate Attention Required for ${studentData.full_name}`

    const textContent = `‡§™‡•ç‡§∞‡§ø‡§Ø ${studentData.parent_name || "‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï"} / Dear ${studentData.parent_name || "Parent"},

‡§Ø‡§π ‡§è‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§∏‡•Ç‡§ö‡§®‡§æ ‡§π‡•à‡•§ ‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ${studentData.full_name} ‡§ï‡•ã ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à‡•§
This is an important notification. Your child ${studentData.full_name} needs immediate assistance.

üö® ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§ï‡•á ‡§ï‡§æ‡§∞‡§£ / Reasons for Concern:
‚Ä¢ ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§‡§ø / Attendance: ${studentData.current_attendance}% (‡§¨‡§π‡•Å‡§§ ‡§ï‡§Æ / Very Low)
‚Ä¢ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® / Performance: ${studentData.current_performance}% (‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ / Needs Improvement)
‚Ä¢ ‡§°‡•ç‡§∞‡•â‡§™‡§Ü‡§â‡§ü ‡§ú‡•ã‡§ñ‡§ø‡§Æ / Dropout Risk: ${studentData.dropout_probability}%

ü§ù ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ / Our Support:
‡§π‡§Æ‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç‡§ü‡§∞ ${studentData.mentor_name} ‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§π‡•à‡§Ç‡•§
Our mentor ${studentData.mentor_name} is ready to help your child.

üìû ‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç / Contact Immediately:
‡§Æ‡•á‡§Ç‡§ü‡§∞ / Mentor: ${studentData.mentor_phone}
‡§à‡§Æ‡•á‡§≤ / Email: ${studentData.mentor_email}

‡§ï‡•É‡§™‡§Ø‡§æ ‡§ú‡§≤‡•ç‡§¶ ‡§∏‡•á ‡§ú‡§≤‡•ç‡§¶ ‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§Ü‡§è‡§Ç ‡§Ø‡§æ ‡§´‡•ã‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡§æ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à‡•§
Please visit the school or call as soon as possible. Your child's future is important.

‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ / Thank you,
‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§ü‡•Ä‡§Æ / EduSupport Team`

    const htmlContent = this.generateHTMLTemplate(subject, textContent, studentData, "alert")

    return { subject, textContent, htmlContent }
  }

  private generateIssueReportTemplate(studentData: any, issueData: any): EmailTemplate {
    const subject = `‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü: ${studentData.full_name} / Issue Report: ${studentData.full_name}`

    const textContent = `‡§™‡•ç‡§∞‡§ø‡§Ø ${studentData.parent_name || "‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï"} / Dear ${studentData.parent_name || "Parent"},

‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ${studentData.full_name} ‡§®‡•á ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•Ä ‡§π‡•à:
Your child ${studentData.full_name} has reported the following issue:

üìã ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ / Issue Type: ${issueData.issue_type}
üìù ‡§µ‡§ø‡§µ‡§∞‡§£ / Description: ${issueData.description}
‚ö†Ô∏è ‡§ó‡§Ç‡§≠‡•Ä‡§∞‡§§‡§æ / Severity: ${this.getSeverityText(issueData.severity)}
üìÖ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ / Report Date: ${new Date().toLocaleDateString("hi-IN")}

ü§ù ‡§Ö‡§ó‡§≤‡•á ‡§ï‡§¶‡§Æ / Next Steps:
‡§π‡§Æ‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç‡§ü‡§∞ ‡§á‡§∏ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç‡•§
Our mentors are working to resolve this issue.

‡§Æ‡•á‡§Ç‡§ü‡§∞ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï / Mentor Contact:
üë§ ${studentData.mentor_name}
üìû ${studentData.mentor_phone}

‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§∏‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§
Please talk to your child and provide necessary support.

‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ / Thank you,
‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§ü‡•Ä‡§Æ / EduSupport Team`

    const htmlContent = this.generateHTMLTemplate(subject, textContent, studentData, "issue")

    return { subject, textContent, htmlContent }
  }

  private generateAttendanceWarningTemplate(studentData: any): EmailTemplate {
    const subject = `‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä: ${studentData.full_name} / Attendance Warning: ${studentData.full_name}`

    const textContent = `‡§™‡•ç‡§∞‡§ø‡§Ø ${studentData.parent_name || "‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï"} / Dear ${studentData.parent_name || "Parent"},

‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ${studentData.full_name} ‡§ï‡•Ä ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§ö‡§ø‡§Ç‡§§‡§æ‡§ú‡§®‡§ï ‡§π‡•à‡•§
Your child ${studentData.full_name}'s attendance is concerning.

üìä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§‡§ø / Current Attendance: ${studentData.current_attendance}%
üìà ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§‡§ø / Required Attendance: 75%

‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï ‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§
Regular attendance is essential for academic success.

‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•ã ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§≠‡•á‡§ú‡•á‡§Ç‡•§
Please ensure your child attends school regularly.

‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ / Thank you,
‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§ü‡•Ä‡§Æ / EduSupport Team`

    const htmlContent = this.generateHTMLTemplate(subject, textContent, studentData, "warning")

    return { subject, textContent, htmlContent }
  }

  private generatePerformanceWarningTemplate(studentData: any): EmailTemplate {
    const subject = `‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä: ${studentData.full_name} / Performance Warning: ${studentData.full_name}`

    const textContent = `‡§™‡•ç‡§∞‡§ø‡§Ø ${studentData.parent_name || "‡§Ö‡§≠‡§ø‡§≠‡§æ‡§µ‡§ï"} / Dear ${studentData.parent_name || "Parent"},

‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ${studentData.full_name} ‡§ï‡•á ‡§∂‡•à‡§ï‡•ç‡§∑‡§£‡§ø‡§ï ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à‡•§
Your child ${studentData.full_name}'s academic performance needs improvement.

üìä ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® / Current Performance: ${studentData.current_performance}%
üìà ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® / Expected Performance: 60%

‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§î‡§∞ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à‡•§
Additional study and support is needed.

‡§Æ‡•á‡§Ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç: ${studentData.mentor_phone}
Contact mentor: ${studentData.mentor_phone}

‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶ / Thank you,
‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§ü‡•Ä‡§Æ / EduSupport Team`

    const htmlContent = this.generateHTMLTemplate(subject, textContent, studentData, "warning")

    return { subject, textContent, htmlContent }
  }

  private generatePasswordResetTemplate(userName: string, resetLink: string): EmailTemplate {
    const subject = "Password Reset Request / ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß"

    const textContent = `Dear ${userName} / ‡§™‡•ç‡§∞‡§ø‡§Ø ${userName},

You have requested to reset your password for your EduAnalytics account.
‡§Ü‡§™‡§®‡•á ‡§Ö‡§™‡§®‡•á EduAnalytics ‡§ñ‡§æ‡§§‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à‡•§

üîê Password Reset Instructions / ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§®‡§ø‡§∞‡•ç‡§¶‡•á‡§∂:

1. Click the link below to reset your password:
   ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§≤‡§ø‡§Ç‡§ï ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§ï‡•á ‡§Ö‡§™‡§®‡§æ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç:

   ${resetLink}

2. This link will expire in 1 hour for security reasons.
   ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§ï‡§æ‡§∞‡§£‡•ã‡§Ç ‡§∏‡•á ‡§Ø‡§π ‡§≤‡§ø‡§Ç‡§ï 1 ‡§ò‡§Ç‡§ü‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ‡•§

3. If you didn't request this password reset, please ignore this email.
   ‡§Ø‡§¶‡§ø ‡§Ü‡§™‡§®‡•á ‡§Ø‡§π ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§∞‡•Ä‡§∏‡•á‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§æ‡§Ç‡§ó‡§æ ‡§π‡•à, ‡§§‡•ã ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏ ‡§à‡§Æ‡•á‡§≤ ‡§ï‡•ã ‡§®‡§ú‡§∞‡§Ö‡§Ç‡§¶‡§æ‡§ú ‡§ï‡§∞‡•á‡§Ç‡•§

‚ö†Ô∏è Security Note / ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ ‡§®‡•ã‡§ü:
Never share this link with anyone. Our team will never ask for your password.
‡§á‡§∏ ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•ã ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§æ‡§ù‡§æ ‡§® ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§ü‡•Ä‡§Æ ‡§ï‡§≠‡•Ä ‡§≠‡•Ä ‡§Ü‡§™‡§ï‡§æ ‡§™‡§æ‡§∏‡§µ‡§∞‡•ç‡§° ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§ó‡•Ä‡•§

Thank you / ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶,
EduAnalytics Team / ‡§è‡§ú‡•Å‡§è‡§®‡§æ‡§≤‡§ø‡§ü‡§ø‡§ï‡•ç‡§∏ ‡§ü‡•Ä‡§Æ`

    const htmlContent = this.generateHTMLTemplate(subject, textContent, { full_name: userName }, "password-reset")

    return { subject, textContent, htmlContent }
  }

  private generateEmailVerificationTemplate(userName: string, verificationLink: string): EmailTemplate {
    const subject = "Verify Your Email Address / ‡§Ö‡§™‡§®‡§æ ‡§à‡§Æ‡•á‡§≤ ‡§™‡§§‡§æ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç"

    const textContent = `Dear ${userName} / ‡§™‡•ç‡§∞‡§ø‡§Ø ${userName},

Welcome to EduAnalytics! Please verify your email address to complete your account setup.
EduAnalytics ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Ö‡§™‡§®‡§æ ‡§ñ‡§æ‡§§‡§æ ‡§∏‡•á‡§ü‡§Ö‡§™ ‡§™‡•Ç‡§∞‡§æ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡§æ ‡§à‡§Æ‡•á‡§≤ ‡§™‡§§‡§æ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§

üìß Email Verification / ‡§à‡§Æ‡•á‡§≤ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§®:

1. Click the link below to verify your email address:
   ‡§Ö‡§™‡§®‡§æ ‡§à‡§Æ‡•á‡§≤ ‡§™‡§§‡§æ ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§≤‡§ø‡§Ç‡§ï ‡§™‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§Ç:

   ${verificationLink}

2. This link will expire in 24 hours.
   ‡§Ø‡§π ‡§≤‡§ø‡§Ç‡§ï 24 ‡§ò‡§Ç‡§ü‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§æ‡§™‡•ç‡§§ ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ‡•§

3. Once verified, you'll have full access to all features.
   ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶, ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§≠‡•Ä ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§ì‡§Ç ‡§§‡§ï ‡§™‡•Ç‡§∞‡•Ä ‡§™‡§π‡•Å‡§Ç‡§ö ‡§Æ‡§ø‡§≤ ‡§ú‡§æ‡§è‡§ó‡•Ä‡•§

üéâ What's Next / ‡§Ü‡§ó‡•á ‡§ï‡•ç‡§Ø‡§æ:
- Access your personalized dashboard
- View student analytics and reports
- Manage your account settings

- ‡§Ö‡§™‡§®‡§æ ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§°‡•à‡§∂‡§¨‡•ã‡§∞‡•ç‡§° ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§∞‡•á‡§Ç
- ‡§õ‡§æ‡§§‡•ç‡§∞ ‡§è‡§®‡§æ‡§≤‡§ø‡§ü‡§ø‡§ï‡•ç‡§∏ ‡§î‡§∞ ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§¶‡•á‡§ñ‡•á‡§Ç
- ‡§Ö‡§™‡§®‡•Ä ‡§ñ‡§æ‡§§‡§æ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç

Thank you for joining us / ‡§π‡§Æ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶,
EduAnalytics Team / ‡§è‡§ú‡•Å‡§è‡§®‡§æ‡§≤‡§ø‡§ü‡§ø‡§ï‡•ç‡§∏ ‡§ü‡•Ä‡§Æ`

    const htmlContent = this.generateHTMLTemplate(subject, textContent, { full_name: userName }, "verification")

    return { subject, textContent, htmlContent }
  }

  private generateHTMLTemplate(subject: string, textContent: string, studentData: any, type: string): string {
    const colorScheme = {
      monthly: { primary: "#0891b2", secondary: "#f97316" },
      alert: { primary: "#dc2626", secondary: "#f97316" },
      issue: { primary: "#eab308", secondary: "#0891b2" },
      warning: { primary: "#f97316", secondary: "#0891b2" },
      "password-reset": { primary: "#dc2626", secondary: "#f97316" },
      verification: { primary: "#059669", secondary: "#0891b2" },
    }

    const colors = colorScheme[type as keyof typeof colorScheme] || colorScheme.monthly

    return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${subject}</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 20px; background-color: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { background: ${colors.primary}; color: white; padding: 20px; text-align: center; }
        .content { padding: 30px; }
        .footer { background: #f8f9fa; padding: 20px; text-align: center; font-size: 14px; color: #666; }
        .highlight { background: ${colors.secondary}; color: white; padding: 10px; border-radius: 4px; margin: 10px 0; }
        .stats { display: flex; justify-content: space-around; margin: 20px 0; }
        .stat { text-align: center; padding: 10px; }
        .stat-value { font-size: 24px; font-weight: bold; color: ${colors.primary}; }
        .contact-info { background: #f8f9fa; padding: 15px; border-radius: 4px; margin: 15px 0; }
        .button { display: inline-block; background: ${colors.primary}; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; margin: 15px 0; }
        .button:hover { background: ${colors.secondary}; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>EduAnalytics / ‡§è‡§ú‡•Å‡§è‡§®‡§æ‡§≤‡§ø‡§ü‡§ø‡§ï‡•ç‡§∏</h1>
            <p>${subject}</p>
        </div>
        <div class="content">
            ${textContent.replace(/\n/g, "<br>").replace(/üìä|üìÖ|‚ö†Ô∏è|üéØ|üè´|üë§|üìû|üìß|üö®|ü§ù|üìã|üìù|üìà|üîê|üìß|üéâ/g, "")}
        </div>
        <div class="footer">
            <p>‡§Ø‡§π ‡§è‡§ï ‡§∏‡•ç‡§µ‡§ö‡§æ‡§≤‡§ø‡§§ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§® ‡§¶‡•á‡§Ç‡•§<br>
            This is an automated message. Please do not reply.</p>
            <p>EduAnalytics - Your partner for educational success<br>
            ‡§è‡§ú‡•Å‡§è‡§®‡§æ‡§≤‡§ø‡§ü‡§ø‡§ï‡•ç‡§∏ - ‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§∏‡§´‡§≤‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡§æ ‡§∏‡§æ‡§•‡•Ä</p>
        </div>
    </div>
</body>
</html>`
  }

  private getRiskLevelText(riskLevel: string): string {
    switch (riskLevel) {
      case "high":
        return "‡§â‡§ö‡•ç‡§ö / High"
      case "medium":
        return "‡§Æ‡§ß‡•ç‡§Ø‡§Æ / Medium"
      case "low":
        return "‡§ï‡§Æ / Low"
      default:
        return "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ / Unknown"
    }
  }

  private getSeverityText(severity: string): string {
    switch (severity) {
      case "critical":
        return "‡§Ö‡§§‡•ç‡§Ø‡§ß‡§ø‡§ï ‡§ó‡§Ç‡§≠‡•Ä‡§∞ / Critical"
      case "high":
        return "‡§ó‡§Ç‡§≠‡•Ä‡§∞ / High"
      case "medium":
        return "‡§Æ‡§ß‡•ç‡§Ø‡§Æ / Medium"
      case "low":
        return "‡§ï‡§Æ / Low"
      default:
        return "‡§Ö‡§ú‡•ç‡§û‡§æ‡§§ / Unknown"
    }
  }

  private getPerformanceMessage(studentData: any): string {
    if (studentData.risk_level === "high") {
      return `‚ö†Ô∏è ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä: ‡§Ü‡§™‡§ï‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§ï‡•ã ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§
‚ö†Ô∏è Warning: Your child needs additional support. Please contact the school immediately.`
    } else if (studentData.risk_level === "medium") {
      return `üìà ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•Ä ‡§ó‡•Å‡§Ç‡§ú‡§æ‡§á‡§∂: ‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§î‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§∏‡•á ‡§¨‡•á‡§π‡§§‡§∞ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ ‡§Æ‡§ø‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§
üìà Room for improvement: Better results can be achieved with regular practice and guidance.`
    } else {
      return `‚úÖ ‡§¨‡§ß‡§æ‡§à! ‡§Ü‡§™‡§ï‡§æ ‡§¨‡§ö‡•ç‡§ö‡§æ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§á‡§∏‡•Ä ‡§§‡§∞‡§π ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç‡•§
‚úÖ Congratulations! Your child is performing well. Keep up the good work.`
    }
  }
}

// Export singleton instance
export const emailService = new EmailService()
